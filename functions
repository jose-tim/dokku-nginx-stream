#!/usr/bin/env bash
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_AVAILABLE_PATH/config/functions"
source "$PLUGIN_AVAILABLE_PATH/nginx-vhosts/functions"

get_custom_nginx_stream_template() {
  declare desc="attempts to copy custom nginx stream template from app image"
  local APP="$1"
  local DESTINATION_FILE="$2"
  local IMAGE_TAG="$(get_running_image_tag "$APP")"
  local IMAGE=$(get_deploying_app_image_name "$APP" "$IMAGE_TAG")
  local NGINX_TEMPLATE_NAME="stream.conf.sigil"
  local DISABLE_CUSTOM_CONFIG="$(fn-plugin-property-get-default "nginx" "$APP" "disable-custom-config" "false")"

  if [[ "$DISABLE_CUSTOM_CONFIG" == "true" ]]; then
    return
  fi

  copy_from_image "$IMAGE" "$NGINX_TEMPLATE_NAME" "$DESTINATION_FILE" 2>/dev/null || true
}

nginx_stream_build_config() {
  local APP="$1"
  local STREAM_TEMPLATE_NAME="stream.conf.sigil"
  local STREAM_TEMPLATE="$PLUGIN_AVAILABLE_PATH/nginx-stream/templates/$STREAM_TEMPLATE_NAME"
  local SCHEME=tcp

  local CUSTOM_STREAM_TEMPLATE="$(plugn trigger nginx-app-stream-template-source "$APP" "app-config")"
  if [[ -n "$CUSTOM_STREAM_TEMPLATE" ]]; then
    STREAM_TEMPLATE="$CUSTOM_STREAM_TEMPLATE"
  fi
  
  if [[ "$(plugn trigger proxy-is-enabled "$APP")" != "true" ]]; then
    dokku_log_info1 "Nginx support is disabled for app ($APP)"
    if [[ -f "$DOKKU_ROOT/$APP/stream.conf" ]]; then
      dokku_log_info1 "Deleting stream.conf"
      rm "$DOKKU_ROOT/$APP/stream.conf"

      if (is_deployed "$APP"); then
        dokku_log_info1 "Reloading nginx after stream.conf deletion"
        validate_nginx && restart_nginx >/dev/null
      fi
    fi
    exit 0
  fi

  # setup nginx listen ports
  plugn trigger ports-configure "$APP"
  local DOKKU_PROXY_PORT_MAP=$(config_get "$APP" DOKKU_PROXY_PORT_MAP)

  local NGINX_LOG_ROOT="$(fn-nginx-log-root)"
  local NGINX_ACCESS_LOG_FORMAT="$(fn-nginx-access-log-format "$APP")"
  local NGINX_ACCESS_LOG_PATH="$(fn-nginx-access-log-path "$APP")"
  local NGINX_ERROR_LOG_PATH="$(fn-nginx-error-log-path "$APP")"

  local PORT_MAP TCP_PROXY_PORT_MAP UDP_PROXY_PORT_MAP
  for PORT_MAP in $DOKKU_PROXY_PORT_MAP; do
    local PROXY_SCHEME="$(awk -F ':' '{ print $1 }' <<<"$PORT_MAP")"
    if [[ "$PROXY_SCHEME" == "tcp" ]]; then
      local TCP_PROXY_PORT_MAP+="$PORT_MAP "
    fi
    if [[ "$PROXY_SCHEME" == "udp" ]]; then
      local UDP_PROXY_PORT_MAP+="$PORT_MAP "
    fi
  done
  local TCP_PROXY_PORT_MAP="$(echo "$TCP_PROXY_PORT_MAP" | xargs)"
  local UDP_PROXY_PORT_MAP="$(echo "$UDP_PROXY_PORT_MAP" | xargs)"
  if [[ -z "$TCP_PROXY_PORT_MAP" ]] && [[ -z "$UDP_PROXY_PORT_MAP" ]]; then
      echo "No stream (tcp/udp) ports specified."
      return 0
  fi

  dokku_log_info1 "Configuring NGINX Stream plugin"

  local TCP_PROXY_UPSTREAM_PORTS
  for PORT_MAP in $TCP_PROXY_PORT_MAP; do
    local PROXY_UPSTREAM_PORT="$(awk -F ':' '{ print $3 }' <<<"$PORT_MAP")"
    if [[ "$(is_val_in_list "$PROXY_UPSTREAM_PORT" "$TCP_PROXY_UPSTREAM_PORTS" " ")" == "false" ]]; then
      local TCP_PROXY_UPSTREAM_PORTS+="$PROXY_UPSTREAM_PORT "
    fi
  done

  local UDP_PROXY_UPSTREAM_PORTS
  for PORT_MAP in $UDP_PROXY_PORT_MAP; do
    local PROXY_UPSTREAM_PORT="$(awk -F ':' '{ print $3 }' <<<"$PORT_MAP")"
    if [[ "$(is_val_in_list "$PROXY_UPSTREAM_PORT" "$UDP_PROXY_UPSTREAM_PORTS" " ")" == "false" ]]; then
      local UDP_PROXY_UPSTREAM_PORTS+="$PROXY_UPSTREAM_PORT "
    fi
  done

  TCP_PROXY_UPSTREAM_PORTS="$(echo "$TCP_PROXY_UPSTREAM_PORTS" | xargs)"
  UDP_PROXY_UPSTREAM_PORTS="$(echo "$UDP_PROXY_UPSTREAM_PORTS" | xargs)"

  local STREAM_BUILD_CONFIG_TMP_WORK_DIR=$(mktemp -d "/tmp/dokku-${DOKKU_PID}-${FUNCNAME[0]}.XXXXXX")
  local STREAM_CONF=$(mktemp --tmpdir="${STREAM_BUILD_CONFIG_TMP_WORK_DIR}" "stream.conf.XXXXXX")
  local CUSTOM_STREAM_TEMPLATE="$NGINX_BUILD_CONFIG_TMP_WORK_DIR/$STREAM_TEMPLATE_NAME"
  trap "rm -rf '$STREAM_CONF' '$NGINX_BUILD_CONFIG_TMP_WORK_DIR' >/dev/null" RETURN INT TERM EXIT

  get_custom_nginx_stream_template "$APP" "$CUSTOM_STREAM_TEMPLATE" 2>/dev/null
  if [[ -f "$CUSTOM_STREAM_TEMPLATE" ]]; then
    dokku_log_info1 'Overriding default stream.conf with detected stream.conf.sigil'
    local STREAM_TEMPLATE="$CUSTOM_STREAM_TEMPLATE"
  fi

  local SIGIL_PARAMS=(-f "$STREAM_TEMPLATE" APP="$APP" DOKKU_ROOT="$DOKKU_ROOT"
    NGINX_LOG_ROOT="$NGINX_LOG_ROOT"
    NGINX_ACCESS_LOG_FORMAT="$NGINX_ACCESS_LOG_FORMAT"
    NGINX_ACCESS_LOG_PATH="$NGINX_ACCESS_LOG_PATH"
    NGINX_ERROR_LOG_PATH="$NGINX_ERROR_LOG_PATH"
    DOKKU_APP_LISTEN_IP="$DOKKU_APP_LISTEN_IP"
    TCP_PROXY_PORT_MAP="$TCP_PROXY_PORT_MAP"
    TCP_PROXY_UPSTREAM_PORTS="$TCP_PROXY_UPSTREAM_PORTS"
    UDP_PROXY_PORT_MAP="$UDP_PROXY_PORT_MAP"
    UDP_PROXY_UPSTREAM_PORTS="$UDP_PROXY_UPSTREAM_PORTS")

  while read -r line || [[ -n "$line" ]]; do
    [[ "$line" =~ ^#.* ]] && continue
    line="$(strip_inline_comments "$line")"
    PROC_TYPE=${line%%=*}
    [[ "$PROC_TYPE" == "web" ]] || continue

    LISTENERS="$(plugn trigger network-get-listeners "$APP" "$PROC_TYPE" | xargs)"
    UPP_PROC_TYPE="${PROC_TYPE^^}"
    UPP_PROC_TYPE="${UPP_PROC_TYPE//-/_}"
    SIGIL_PARAMS+=( "DOKKU_APP_${UPP_PROC_TYPE}_LISTENERS=$LISTENERS" )
  done < <(plugn trigger ps-current-scale "$APP")

  sigil "${SIGIL_PARAMS[@]}" | cat -s >"$STREAM_CONF"
  mv "$STREAM_CONF" "$DOKKU_ROOT/$APP/stream.conf"
  validate_nginx && restart_nginx >/dev/null
}
